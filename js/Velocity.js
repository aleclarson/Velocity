// Generated by CoffeeScript 1.12.4
var Type, type;

Type = require("Type");

type = Type("Velocity");

type.defineArgs({
  maxAge: Number
});

type.defineValues(function(options) {
  return {
    maxAge: options.maxAge || 1000,
    _events: [],
    _direction: 0,
    _lastPosition: null
  };
});

type.defineGetters({
  direction: function() {
    return this._direction;
  }
});

type.defineMethods({
  get: function() {
    var distance, elapsedTime, eventCount, first, last;
    this._prune(this.maxAge);
    eventCount = this._events.length;
    if (eventCount < 2) {
      return 0;
    }
    first = this._events[0];
    last = this._events[eventCount - 1];
    distance = last.position - first.position;
    elapsedTime = last.time - first.time;
    return distance / elapsedTime * 1000;
  },
  update: function(time, position) {
    this._prune(this.maxAge);
    this._events.push({
      time: time,
      position: position
    });
    if (this._lastPosition !== null) {
      return this._computeDirection(position);
    }
    this._lastPosition = position;
  },
  reset: function() {
    if (this._events.length) {
      this._events.length = 0;
      this._direction = 0;
      this._lastPosition = null;
    }
  },
  _prune: function(ms) {
    var event, eventCount, events, index, startTime;
    startTime = Date.now() - ms;
    events = this._events;
    eventCount = events.length;
    if (eventCount === 0) {
      return;
    }
    index = 0;
    while (event = events[index]) {
      if (event.time >= startTime) {
        break;
      }
      index += 1;
    }
    if (index === eventCount) {
      events.length = 0;
      this._direction = 0;
      return;
    }
    if (index > 0) {
      this._events = events.slice(index);
    }
  },
  _computeDirection: function(position) {
    var lastDirection;
    lastDirection = this._direction;
    this._direction = position > this._lastPosition ? 1 : -1;
    this._lastPosition = position;
    if (lastDirection === 0) {
      return;
    }
    if (this._direction !== lastDirection) {
      this._events = this._events.slice(-2);
    }
  }
});

module.exports = type.build();
